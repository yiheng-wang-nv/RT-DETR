__include__: [
  '/colon_workspace/RT-DETR/rtdetrv2_pytorch/configs/dataset/colon_detection.yml',
  '/colon_workspace/RT-DETR/rtdetrv2_pytorch/configs/runtime.yml',
  '/colon_workspace/RT-DETR/rtdetrv2_pytorch/configs/rtdetrv2/include/dataloader.yml',
  '/colon_workspace/RT-DETR/rtdetrv2_pytorch/configs/rtdetrv2/include/optimizer.yml',
]

task: detection

model: RTDETR
criterion: RTDETRCriterionv2
postprocessor: RTDETRPostProcessor


use_focal_loss: True
eval_spatial_size: [640, 640] # h w


output_dir: ./output/rtdetrv2_tresnet_6x_colon

RTDETR: 
  backbone: TResNetBackbone
  encoder: HybridEncoder
  decoder: RTDETRTransformerv2


TResNetBackbone:
  pretrained_path: /colon_workspace/mtresnet_opim_86.72.pth
  freeze_norm: False


HybridEncoder:
  in_channels: [128, 1024, 2048]
  feat_strides: [4, 8, 16]

  # intra
  hidden_dim: 384
  use_encoder_idx: [2]
  num_encoder_layers: 1
  nhead: 8
  dim_feedforward: 2048
  dropout: 0.
  enc_act: 'gelu'
  
  # cross
  expansion: 1.0
  depth_mult: 1
  act: 'silu'


RTDETRTransformerv2:
  feat_channels: [384, 384, 384]
  feat_strides: [4, 8, 16]
  hidden_dim: 256
  num_levels: 3

  num_layers: 6
  num_queries: 300

  num_denoising: 100
  label_noise_ratio: 0.5
  box_noise_scale: 1.0 # 1.0 0.4

  eval_idx: -1

  # NEW
  num_points: [4, 4, 4] # [3,3,3] [2,2,2]
  cross_attn_method: default # default, discrete
  query_select_method: default # default, agnostic 


RTDETRPostProcessor:
  num_top_queries: 300


RTDETRCriterionv2:
  weight_dict: {loss_vfl: 1, loss_bbox: 5, loss_giou: 2,}
  losses: ['vfl', 'boxes', ]
  alpha: 0.75
  gamma: 2.0

  matcher:
    type: HungarianMatcher
    weight_dict: {cost_class: 2, cost_bbox: 5, cost_giou: 2}
    alpha: 0.25
    gamma: 2.0


optimizer:
  type: AdamW
  params:
    - 
      params: '^(?=.*(?:encoder|decoder))(?=.*(?:norm|bn)).*$'
      weight_decay: 0.

  lr: 0.0004
  betas: [0.9, 0.999]
  weight_decay: 0.0001
  eps: 0.00001
